{
  "compilerOptions": {
    "baseUrl": ".", // 工作根目录
    "rootDir": "src",// 用来指定编译文件的根目录，编译器会在根目录查找入口文件
    "target": "es5", //target用于指定编译之后的版本目标
    "lib": [
      "esnext",
      "es7",
      "dom"
    ], //编译过程中需要引入的库文件的列表。
    "sourceMap": true, //生成相应的 .map文件。
    "allowJs": true, //允许编译javascript文件。
    "skipLibCheck": true, //忽略所有的声明文件（ *.d.ts）的类型检查。
    "strictNullChecks": false, //在严格的 null检查模式下， null和 undefined值不包含在任何类型里，只允许用它们自己和 any来赋值
    "esModuleInterop": true, //使 typescript 来兼容所有模块方案的导入。
    "suppressImplicitAnyIndexErrors": true, //阻止 --noImplicitAny对缺少索引签名的索引对象报错。查看 issue #1232了解详情。
    "allowSyntheticDefaultImports": true, //允许从没有设置默认导出的模块中默认导入。这并不影响代码的输出，仅为了类型检查。
    "strict": true, //启用所有严格类型检查选项。
    "forceConsistentCasingInFileNames": true,//禁止对同一个文件的不一致的引用。
    "noFallthroughCasesInSwitch": true, //报告switch语句的fallthrough错误。
    "noImplicitReturns": false, //不是函数的所有返回路径都有返回值时报错。
    "noImplicitThis": true, //当 this表达式的值为 any类型的时候，生成一个错误。
    "noImplicitAny": false, //在表达式和声明上有隐含的 any类型时报错
    "importHelpers": false, //从 tslib 导入辅助工具函数
    "module": "esnext", //指定生成哪个模块系统代码
    "moduleResolution": "node", //决定如何处理模块。或者是"Node"对于
    "resolveJsonModule": true, // 包含导入的模块.json的扩展。
    "isolatedModules": false, //将每个文件作为单独的模块
    "emitDecoratorMetadata": true, //给源码里的装饰器声明加上设计类型元数据。
    "experimentalDecorators": true, //启用实验性的ES装饰器。
    "jsx": "react-jsx", //在 .tsx文件里支持JSX： "React"或 "Preserve"。查看 JSX。
    "paths": {
      "@/*": ["src/*"],
    },
  },
  "include": [
    "src/**/*"
  ], //编译时需要包含
  "exclude": [
    "node_modules",
    "build",
    "scripts",
    "src/setupTests.ts"
  ] //剔除的文件夹
}